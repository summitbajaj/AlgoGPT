"""Insert vector db

Revision ID: 44bce1454689
Revises: 6d5a08430bc2
Create Date: 2025-03-08 17:18:02.378307

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy

# revision identifiers, used by Alembic.
revision: str = '44bce1454689'
down_revision: Union[str, None] = '6d5a08430bc2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('student_profiles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_student_profiles_user_id'), 'student_profiles', ['user_id'], unique=False)
    op.create_table('problem_embeddings',
    sa.Column('problem_id', sa.Integer(), nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['problem_id'], ['problems.id'], ),
    sa.PrimaryKeyConstraint('problem_id')
    )
    op.create_table('student_attempts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('student_id', sa.UUID(), nullable=False),
    sa.Column('problem_id', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('total_time_seconds', sa.Integer(), nullable=True),
    sa.Column('submission_count', sa.Integer(), nullable=True),
    sa.Column('completed', sa.BOOLEAN(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['problem_id'], ['problems.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_student_attempts_student_id'), 'student_attempts', ['student_id'], unique=False)
    op.create_table('student_topic_mastery',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('student_profile_id', sa.UUID(), nullable=False),
    sa.Column('topic_id', sa.Integer(), nullable=False),
    sa.Column('mastery_level', sa.Float(), nullable=False),
    sa.Column('problems_attempted', sa.Integer(), nullable=True),
    sa.Column('problems_solved', sa.Integer(), nullable=True),
    sa.Column('last_attempted_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['student_profile_id'], ['student_profiles.id'], ),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('student_profile_id', 'topic_id', name='uix_student_topic')
    )
    op.create_table('topic_progression',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('topic_id', sa.Integer(), nullable=False),
    sa.Column('prerequisite_topic_id', sa.Integer(), nullable=True),
    sa.Column('progression_order', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['prerequisite_topic_id'], ['topics.id'], ),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('topic_id', 'prerequisite_topic_id', name='uix_topic_progression')
    )
    op.add_column('problems', sa.Column('is_profiling_problem', sa.BOOLEAN(), nullable=True))
    op.add_column('problems', sa.Column('is_ai_generated', sa.BOOLEAN(), nullable=True))
    op.alter_column('submission_test_results', 'status',
               existing_type=postgresql.ENUM('ACCEPTED', 'WRONG_ANSWER', 'RUNTIME_ERROR', 'TIME_LIMIT_EXCEEDED', 'COMPILATION_ERROR', name='submissionstatus'),
               nullable=False)
    op.alter_column('submissions', 'status',
               existing_type=postgresql.ENUM('ACCEPTED', 'WRONG_ANSWER', 'RUNTIME_ERROR', 'TIME_LIMIT_EXCEEDED', 'COMPILATION_ERROR', name='submissionstatus'),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('submissions', 'status',
               existing_type=postgresql.ENUM('ACCEPTED', 'WRONG_ANSWER', 'RUNTIME_ERROR', 'TIME_LIMIT_EXCEEDED', 'COMPILATION_ERROR', name='submissionstatus'),
               nullable=True)
    op.alter_column('submission_test_results', 'status',
               existing_type=postgresql.ENUM('ACCEPTED', 'WRONG_ANSWER', 'RUNTIME_ERROR', 'TIME_LIMIT_EXCEEDED', 'COMPILATION_ERROR', name='submissionstatus'),
               nullable=True)
    op.drop_column('problems', 'is_ai_generated')
    op.drop_column('problems', 'is_profiling_problem')
    op.drop_table('topic_progression')
    op.drop_table('student_topic_mastery')
    op.drop_index(op.f('ix_student_attempts_student_id'), table_name='student_attempts')
    op.drop_table('student_attempts')
    op.drop_table('problem_embeddings')
    op.drop_index(op.f('ix_student_profiles_user_id'), table_name='student_profiles')
    op.drop_table('student_profiles')
    # ### end Alembic commands ###
