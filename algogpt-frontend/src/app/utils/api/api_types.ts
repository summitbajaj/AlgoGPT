/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/problems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Problems */
        get: operations["list_problems_problems_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/problems/{problem_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Problem */
        get: operations["get_problem_problems__problem_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/problems/{problem_id}/test-cases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch Test Cases */
        get: operations["fetch_test_cases_problems__problem_id__test_cases_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute Code
         * @description Fetches test cases, forwards request to code runner, and returns results.
         */
        post: operations["execute_code_execute_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analyze_complexity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Analyze Complexity
         * @description Fetches test cases, forwards request to code runner, and returns results.
         */
        post: operations["analyze_complexity_analyze_complexity_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/run-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run Code
         * @description Handles run code execution requests.
         *
         *     - Receives the user-submitted code, problem ID, and test cases.
         *     - Forwards the request to the code execution engine.
         *     - Retrieves the execution results and returns them to the client.
         *
         *     Args:
         *         request (PostRunCodeRequest): The request payload containing the code, problem ID, and test cases.
         *         db (Session): The database session dependency for querying/storing execution results.
         *
         *     Returns:
         *         JSON response with execution results.
         */
        post: operations["run_code_run_code_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** CodeExecutionRequest */
        CodeExecutionRequest: {
            /** Code */
            code: string;
            /** Problem Id */
            problem_id: number;
        };
        /** CodeExecutionResponse */
        CodeExecutionResponse: {
            /** Test Results */
            test_results: Record<string, never>[];
            /** Execution Time */
            execution_time: number;
        };
        /** ComplexityAnalysisRequest */
        ComplexityAnalysisRequest: {
            /** Code */
            code: string;
            /** Problem Id */
            problem_id: number;
        };
        /** ComplexityAnalysisResponse */
        ComplexityAnalysisResponse: {
            /** Combined Complexity */
            combined_complexity: string;
            /** Feedback */
            feedback: string;
        };
        /** ExampleTestCaseModel */
        ExampleTestCaseModel: {
            /** Test Case Id */
            test_case_id: number;
            /** Input Data */
            input_data: Record<string, never>;
            /** Expected Output */
            expected_output: unknown;
            /** Explanation */
            explanation: string;
        };
        /** GetProblemResponse */
        GetProblemResponse: {
            /** Problem Id */
            problem_id: number;
            /** Title */
            title: string;
            /** Description */
            description: string;
            /** Difficulty */
            difficulty: string;
            /** Constraints */
            constraints: string;
            /** Topics */
            topics: string[];
            /** Examples */
            examples: components["schemas"]["ExampleTestCaseModel"][];
            /** Starter Code */
            starter_code: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** PostRunCodeRequest */
        PostRunCodeRequest: {
            /** Source Code */
            source_code: string;
            /** Problem Id */
            problem_id: number;
            /** Test Cases */
            test_cases: components["schemas"]["RunCodeTestCase"][];
        };
        /** PostRunCodeResponse */
        PostRunCodeResponse: {
            /** Test Results */
            test_results: components["schemas"]["RunCodeTestCaseResult"][];
        };
        /** RunCodeTestCase */
        RunCodeTestCase: {
            /** Test Case Id */
            test_case_id: number;
            /** Input */
            input: Record<string, never>;
        };
        /** RunCodeTestCaseResult */
        RunCodeTestCaseResult: {
            /** Test Case Id */
            test_case_id: number;
            /** Input */
            input: Record<string, never>;
            /** Output */
            output: unknown;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_problems_problems_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_problem_problems__problem_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                problem_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProblemResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    fetch_test_cases_problems__problem_id__test_cases_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                problem_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    execute_code_execute_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CodeExecutionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CodeExecutionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    analyze_complexity_analyze_complexity_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComplexityAnalysisRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ComplexityAnalysisResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    run_code_run_code_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostRunCodeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostRunCodeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
